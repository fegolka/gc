name: Builds samples toolchains with Crosstool-NG
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: false
      samples:
        description: 'Samples configurations (list-samples)'
        required: false
jobs:
  crosstool:
    name: Crosstool-NG
    if: github.event.inputs.samples
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.list.outputs.matrix }}
    steps:
      - id: list
        name: Generate matrix
        run: echo "matrix=$(echo ${{ github.event.inputs.samples }} | sed -e 's/ /\n/g' | jq -cnR '[inputs | select(length>0)]')" >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: sudo apt-get install -y gperf help2man libtool-bin
      - name: To clone the Crosstool-NG repository
        run: git clone https://github.com/crosstool-ng/crosstool-ng
      - name: Configure Crosstool-NG
        run: cd ${{ github.workspace }}/crosstool-ng && ./bootstrap && ./configure --prefix=${{ github.workspace }}/.ct-ng/
      - name: Build Crosstool-NG
        run:  cd ${{ github.workspace }}/crosstool-ng && make install
      - name: Compresses Crosstool-NG
        run: cd ${{ github.workspace }} && tar -cf ct-ng.tar .ct-ng/
      - name: Upload Crosstool-NG
        uses: actions/upload-artifact@v3
        with:
          name: crosstool
          path: ct-ng.tar
  toolchains:
    needs: [crosstool]
    name: ${{ matrix.target }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        target: ${{ fromJson(needs.crosstool.outputs.matrix) }}
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get install -y gperf help2man libtool-bin
          echo "$GITHUB_WORKSPACE/.ct-ng/bin" >> $GITHUB_PATH
      - name: Download Crosstool-NG
        uses: actions/download-artifact@v3
        with:
          name: crosstool
      - name: Extract Crosstool-NG
        run: |
          tar -xf ct-ng.tar
          echo "___________________________________________"
          ct-ng version
      - name: Cache (tarballs)
        uses: actions/cache@v3
        with:
          path: .build/tarballs/
          key: tarballs-tar
          restore-keys: tarballs-
      - name: Configuration (${{ matrix.target }})
        run: |
          ct-ng list-samples
          [ ! -d ${{ github.workspace }}/.ct-ng/share/crosstool-ng/samples/${{ matrix.target }} ] && exit 1
          echo "___________________________________________"
          ct-ng show-${{ matrix.target }}
          echo "___________________________________________"
          ct-ng ${{ matrix.target }}
          sed -i -e '/CT_LOG_PROGRESS_BAR/s/y$/n/' .config
          sed -i -e '/CT_LOCAL_TARBALLS_DIR/s/HOME/CT_TOP_DIR/' .config
          sed -i -e '/CT_PREFIX_DIR/s/HOME/CT_TOP_DIR/' .config
          echo "___________________________________________"
          cat .config
      - name: Building the Toolchain (${{ matrix.target }}) for ubuntu-20.04
        run: ct-ng build
      - name: Compresses the Toolchain (${{ matrix.target }})
        run: |
          echo Toolchain-${{ matrix.target }}.tar.xz
          mkdir -p ${{ github.workspace }}/toolchains
          find "${{ github.workspace }}/x-tools" -exec chmod +w {} \;
          for d in ${{ github.workspace }}/x-tools/*/; do [ -d "${d}" ] && XZ_OPT=-e9 tar -cvJf "${{ github.workspace }}/toolchains/Toolchain-${{ matrix.target }}.tar.xz" -C "${d}" . > /dev/null 2>&1; done
      - name: Upload toolchain (${{ matrix.target }})
        if: github.event.inputs.tag
        uses: actions/upload-artifact@v3
        with:
          name: toolchains
          path: ${{ github.workspace }}/toolchains/Toolchain-${{ matrix.target }}.tar.xz
  release:
    needs: [toolchains]
    name: Automatic Releases
    if: github.event.inputs.tag
    runs-on: ubuntu-20.04
    steps:
      - name: Download toolchains
        uses: actions/download-artifact@v3
        with:
          name: toolchains
          path: ${{ github.workspace }}/toolchains
      - name: Automatic Releases
        uses: softprops/action-gh-release@v1
        with:
          name: "GitHub Build"
          tag_name: ${{ github.event.inputs.tag }}
          prerelease: false
          files: ${{ github.workspace }}/toolchains/*.tar.xz
